package ${package.Controller};

import ${package.Service}.${table.serviceName};
import org.springframework.validation.annotation.Validated;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import lombok.extern.slf4j.Slf4j;
import io.swagger.annotations.Api;

#if(${superServiceClass} == 'BaseService')
import io.swagger.annotations.ApiOperation;
import javax.validation.Valid;
import org.springframework.http.MediaType;
import com.xdcplus.exceptions.domain.ResponseVO;
import ${package.Dto}.${entity}DTO;
import ${package.Dto}.${entity}FilterDTO;
import ${package.Vo}.${entity}VO;
import com.xdcplus.pager.vo.PageVO;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import javax.validation.constraints.NotNull;
#end

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(tags = "${table.comment}管理")
@Slf4j
@Validated
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} ${table.serviceName.substring(0,1).toLowerCase()}${table.serviceName.substring(1)};

    #if(${superServiceClass} == 'BaseService')
    @ApiOperation("新增${table.comment}")
    @PostMapping(value = "", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseVO<Void> save${entity}(@RequestBody @Valid ${entity}DTO ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}DTO) {
        log.info("save${entity} {}", ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}DTO.toString());
        ${table.serviceName.substring(0,1).toLowerCase()}${table.serviceName.substring(1)}.save${entity}(${entity.substring(0,1).toLowerCase()}${entity.substring(1)}DTO);
        return ResponseVO.success();
    }

    @ApiOperation("修改${table.comment}")
    @PutMapping(value = "", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseVO<Void> update${entity}(@RequestBody @Valid ${entity}DTO ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}DTO) {
        log.info("update${entity} {}", ${entity.substring(0,1).toLowerCase()}${entity.substring(1)}DTO.toString());
        ${table.serviceName.substring(0,1).toLowerCase()}${table.serviceName.substring(1)}.update${entity}(${entity.substring(0,1).toLowerCase()}${entity.substring(1)}DTO);
        return ResponseVO.success();
    }

    @ApiOperation("删除${table.comment}")
    @DeleteMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "id", dataTypeClass = Long.class, value = "主键ID", required = true)
    })
    public ResponseVO<Void> delete${entity}ById(@PathVariable("id") @NotNull(message = "主键ID不能为空") Long id) {
        log.info("delete${entity}ById {}", id);
        ${table.serviceName.substring(0,1).toLowerCase()}${table.serviceName.substring(1)}.delete(id);
        return ResponseVO.success();
    }

    @ApiOperation("查询${table.comment}")
    @PostMapping(value = "/get", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseVO<PageVO<${entity}VO>> find${entity}(@RequestBody @Valid ${entity}FilterDTO filterDTO) {
        log.info("find${entity} {}", filterDTO.toString());
        return ResponseVO.success(${table.serviceName.substring(0,1).toLowerCase()}${table.serviceName.substring(1)}.page(filterDTO));
    }

    @ApiOperation("根据ID查询${table.comment}")
    @GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "id", dataTypeClass = Long.class, value = "主键ID", required = true)
    })
    public ResponseVO<${entity}VO> find${entity}ById(@PathVariable("id") @NotNull(message = "主键ID不能为空") Long id) {
        log.info("find${entity}ById {}", id);
        return ResponseVO.success(${table.serviceName.substring(0,1).toLowerCase()}${table.serviceName.substring(1)}.queryById(id));
    }


    #end











}

#end